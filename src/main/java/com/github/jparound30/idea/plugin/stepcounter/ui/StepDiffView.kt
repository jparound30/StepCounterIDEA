package com.github.jparound30.idea.plugin.stepcounter.ui

import com.github.jparound30.idea.plugin.stepcounter.action.StepCountAction
import com.intellij.ui.components.JBScrollPane
import com.intellij.ui.layout.panel
import com.intellij.ui.table.JBTable
import jp.sf.amateras.stepcounter.diffcount.`object`.DiffFileResult

import javax.swing.*
import java.awt.*
import java.awt.event.ActionEvent
import java.awt.event.ActionListener

/**
 * @author jparound30
 */
class StepDiffView(data: List<DiffFileResult>) {
    private var tableView: JBTable? = null
    private var Cancel: JButton? = null
    private var Save: JButton? = null
    private var rootPanel: JPanel? = null

    private val tableModel: StepCountAction.DiffTableMode

    private var _cancelListener: ActionListener? = null
    fun setCancelListener(listener: ActionListener)
    {
        _cancelListener = listener
    }

    private fun cancel(event: ActionEvent) {
        if (_cancelListener != null) {
            _cancelListener!!.actionPerformed(event)
        }
    }

    private var _okListener: ActionListener? = null
    fun setOkListener(listener: ActionListener) {
        _okListener = listener
    }

    private fun ok(event: ActionEvent) {
        if (_okListener != null) {
            _okListener!!.actionPerformed(event)
        }
    }

    init {
//        `$$$setupUI$$$`()
        tableModel = StepCountAction.DiffTableMode(data)
        tableView = JBTable()

        tableView!!.model = tableModel
        tableView!!.columnModel.getColumn(1).maxWidth = 75
        tableView!!.columnModel.getColumn(2).maxWidth = 75
        tableView!!.columnModel.getColumn(3).maxWidth = 150
        tableView!!.preferredScrollableViewportSize = Dimension(980, 400)
        tableView!!.putClientProperty("html.disable", java.lang.Boolean.FALSE)
        val scroll = JBScrollPane()
        scroll.add(tableView)
        scroll.setViewportView(tableView)

        rootPanel = panel {
            row {
                scroll()
            }
            row {
                button("Cancel", actionListener = { event -> cancel(event)})
                button("OK", actionListener = { event -> ok(event) })
            }
        }
    }

    private fun createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!

     * @noinspection ALL
     */
//    private fun `$$$setupUI$$$`() {
//        rootPanel = JPanel()
//        rootPanel!!.layout = GridLayoutManager(2, 2, Insets(0, 0, 0, 0), -1, -1)
//        val jBScrollPane1 = JBScrollPane()
//        rootPanel!!.add(jBScrollPane1, GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false))
//        tableView = JBTable()
//        tableView!!.preferredScrollableViewportSize = Dimension(980, 400)
//        tableView!!.putClientProperty("html.disable", java.lang.Boolean.FALSE)
//        jBScrollPane1.setViewportView(tableView)
//        Cancel = JButton()
//        Cancel!!.text = "Cancel"
//        rootPanel!!.add(Cancel!!, GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))
//        Save = JButton()
//        Save!!.text = "Save"
//        rootPanel!!.add(Save!!, GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))
//    }

    /**
     * @noinspection ALL
     */
    fun `$$$getRootComponent$$$`(): JComponent {
        return rootPanel!!
    }
}
